services:
  db:
    build:
      context: ./database
      dockerfile: docker/Dockerfile.db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - attendancerecords-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5000   
    depends_on:
      db:
        condition: service_healthy
    networks:
      - attendancerecords-network
    ports:
      - "5000:5000"

  frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile.frontend
    environment:
      REACT_APP_BACKEND_URL: http://localhost:5000
      CI: "true"
    networks:
      - attendancerecords-network
    ports:
      - "3000:3000"


volumes:
  db-data:

networks:
  attendancerecords-network:
    driver: bridge
